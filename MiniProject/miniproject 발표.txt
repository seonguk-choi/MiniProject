안녕하세요 A조 발표자 최성욱입니다.
A조 OMR 프로젝트 발표를 시작하겠습니다.
발표순서는 보이시는 순서로 진행하겠습니다.
팀소개 먼저 해드리겠습니다.
팀장인 저를 중심으로 다섯명 모두 중요한 역할을 하였습니다.
저는 시험지페이지를 만들어 학생답안지를 결과페이지로 보내는 기능을 구현하였습니다.
기근태님은 관리자모드를 전답하였습니다.
노명욱님은 시험체점을 기능을 통해 학생정보를 재입력하는 기능 맡았습니다.
이지강님은 등수리스트 구현을 위해 DB활용과 PPT를 만들었습니다.
이주운님은 로그인페이지를 통해 학생과 관리자를 나누는 기능을 구현했습니다.
이번 미니프로젝트를 통해 저희가 얻고자 하는 것은 하나였습니다.
지금 현장에서 쓰이고 있는 MVC패턴과 JSTL을 이번 프로젝트에 사용함으로서
6개월 과정이 끝나고 현장에 나가서도 활용하자 하는 것이었습니다.
로직을 단순화함으로 오류를 빠르게 개선할 수 있으면 당연히 확장성도 뛰어납니다.
더불어 스크립틀릿을 쓰지 않기 때문제 불필요한 코드를 줄이고 개발속도를 높일 수 있습니다. 
저희가 이부분을 얼마나 중요하게 다루었는지 프로젝트 일정에서 확인 하실 수 있습니다.
보여드리는 바와 같이 2주간의 프로젝트중 절반을 MVC패턴과 JSTL을 학습하는데 모두 썼습니다.
이렇게 일정을 직접 쓰고나니 실직적 구현은 이틀이었습니다.
저희가 지금 막 걸음마 떼는 학생들이다 보니 MVC 패턴을 익히는 많이 애먹었습니다.
그만큼 JSP를 제대로 학습한 프로젝트였습니다.
또한 일정에서 보시는 바와 같이 다양한 개발환경을 쓰려고 노력하였습니다.
다음 프로그램구현을 위해 저희가 활용했던 프로그램들을 소개해드리겠습니다.
개발, 디자인, 의사통소 세가지 부분에서 개발자들이 쓰고 있는 프로그램들을 써 보았습니다.
소스트리를 쓰는데 신경을 많이 썼습니다. 병합을 하다보니 전에 본적 없던 코드들이 나와서
많이 당황했지만 괜찮았습니다. 왜냐면 한땀한땀 붙였으니까요.
final프로젝트 전까지 소스트리를 계속 써보며는게 중요할 거라 생각됩니다.
다음으로 프로그램 구조를 보여드리겠습니다. 먼저 데이터베이스입니다.
학생, 답안지, 타이머 세가지 테이블로 구성하였습니다.
학생코드를 기본키로 성정하여 학생정보가 곁지는 것을 방지하였습니다.
다음으로 실제 구현한 코드 파일들입니다. 보시는 것은 복잡해보이지만 구현하는 입장에서는 데이터는 넘기는
방법에 조금씩 익숙해지는 오히려 편안한 구조였고 일정에서도 보신바처럼 이틀만에 구현할 수 있었습니다.
다음은 저희가 매우 사랑하는 MVC2 패턴 구조를 간략하게 설명들이겠습니다.
사용자는 로그인을 통해 원하는 정보를 요청합니다. 그러면 컨드롤러에서 가장 먼저 요청사항을 받아 거기에 알맞는
액션클래스로 보내줍니다. 이곳 액션클래스가 실질적으로 기능을 하는 곳입니다.
액션클래스에서 DAO 메소드를 활용하여 멤퍼의 쿼리문으로 DB에 접근해서 원하는 데이터를 불러옵니다.
그리고 액션클래스에서 데이터를 컨트롤러로 보내고 액션클래스 기능을 바탕으로 사용가 요청한 페이지에 데이터를 보내
화면에 보여주게 됩니다. 어떤 과정에서도 컨드롤러가 중심이되어 교통정리를 해준 덕분에 화면에 뜨는 오류에 따라 빠른게 수정할 수 있었습니다.
예를 들어 404오류라면 컨트롤러에 접근하는 url멤핑으 문제임으로 오타를 찾으면 대부분 해결 할 수 있었습니다.
또는 500오류가 다면 컨트롤러 까지는 잘 들어갔고 액션에서 이전 페이지에서 값을 전달 받지 못하거나 mybatis 또는 DAO메소드의 오류가서 금방 찾을 수 잇었습니다.
그리고 하얀화면이 뜨면 컨트롤러까지 잘들어갔고 jsp가 구현되지 않거나 연결이 잘 안되것이라서 이것도 오타를 확인하면 해결 할 수 있었습니다.
다음은 학생로직과 관리자 로직입니다. 솔직히 매우 간단합니다.
이번에는 실제로 구현해 보겠습니다. 로그인에서 응시한 학생인지, 아직응시하지 않은 학생인지, 그리고 매니저인지 분리하여 원하는 컨트롤러를 통해 요청하는 페이지로 보냅니다.
또한 아무정보를 입력하지 않으면 알림창이 뜨면 꼭 입력하도록 하였습니다.
학생로직먼저 보여드리겠습니다. 로그인을 하면 바로 응시한 학생으로 데이터가 변경됩니다.
시험을 치릅니다. 테이블에 보시면 타이머도 넣어볼 계획입니다. 아래보이시는 라디오기능은 jstl로 구현함으로 코드 길이가 십분의 1로 줄었습니다.
답을 넣고 결과페이지로 학생정보와 답안지를 보냅니다. 컨트롤러에서 결과액션클래스로 정보를 보내고 다시 받아 결과를 보여줍니다.
결과 또한 jstl문으로 구현하였습니다. 등수를 확인할 수 있으면 다른 학생들의 점수와 함께 등수를 확인 할 수 있는 기능을 더 추가해보려고 합니다.
다음은 메니저로 로그인해 보겠습니다. 관리자는 시험응시나 나의성적확인 버튼을 눌러도 바로 관리자모드로 넘어갈 수 있도록 하였습니다.
학생정보를 수정할 때 기본키인 학생수험번호는 수정할 수 없도록 하였습니다. 그리고 학생을 삭제할 수 있으며 새로운 수험생도 등록할 수도 있습니다.
스케줄 활용 미숙으로 답안지변경과, 타이머변경 기능을 구현하지 못해 많이 아쉽지만 발표이후 다시 Omr프그램을 구현해보면서 계획했더 기능을 모두 넣어보려고 합니다.
미자막으로 프로젝트를 통해 느낀 소감입니다.
앞으로 프로그램에 더 기능을 추가하면서 MVC패턴을 더 배울 수 있도록 할 계획입니다. 특히 타이머를 기능에서 시간초과시 바로 결과페이지로 보내는 기능과 오답노트 기능을 꼭 해보고 싶은 기능입니다.
사실 가장 하고 싶은 부분인 figma 디자인데로 구현하는 것입니다.
보시는 것처럼 figma 디자인입니다. 학생정보도 라디오 버튼으로 구현해서 오타로 인한 오류를 방지 하고자 했습니다.
답안지 변경과 여기에 소개는 못해드렸지만 타이머 변경도 디자인하였습니다.
앞으로 final 프로젝트까지 저희 팀의 발전방향을 말씀드리겠습니다.
이번 프로젝트를 크게 배운건 명확한 주간 목표를 정하고 하나씩 이뤄나가야
부득이한 상황속에서 대처할 수 있고 시간적, 체력적 여유를 갖을 수 있을거라 생각합니다.
또한 notion을 적극활용하여 프로젝트의 진행을 시각적으로 볼 수 있어 유기적인 팀원 각자가 역할을 원할하게 알 수 있을거라 생각합니다.
이번프로젝트에서 가장큰벽이 MVC패턴이었습니다. 팀장인 저의 우리 팀원들이 수료후에 현장에서도 잘 적응할 수 있었으면 하는 욕심으로 MVC패턴을 쓰는 것을 고집하였습니다.
그러다보니 프로젝트의 절반을 할게하게 되었습니다. 정확한 목표를 세우되 상황에 따라 유연한 방향전환도 중요하다고 생각합니다.
이번 프로젝트를 통해 MVC패턴을 몸소 배울 수 있었다는게 정말 큰 수확이라고 생각합니다. 미니프로젝트 이후에도 다시 omr프로젝트를 구현함으서 개발자 프로그램에 적응하는 것이 중요하다고 생각합니다.
저희 프로젝트를 보시면 궁금하신 점있으면 질문부탁드립니다.

